namespace = kiyo_trade_orbit_event

# Trade Fleet orbiting second planet (NOT belonging to trade route owner)
fleet_event = {
	id = kiyo_trade_orbit_event.1
	title = kiyo_trade_orbit_event.1.title
	desc = kiyo_trade_orbit_event.1.desc
	picture = GFX_evt_galactic_market
	location = root
	#is_triggered_only = yes
	
	trigger = {
		exists = owner
		exists = orbit
		orbit = {
			exists = owner
			owner = {
				is_country_type = default
				NOR = {
					is_same_value = root.owner
					has_closed_borders = root.owner
					is_at_war_with = root.owner
				}
			}
		}
		any_owned_ship = { is_ship_size = kiyo_trade }
		NOT = {
			has_fleet_flag = kiyo_event_trade_deleted_cargo
			has_fleet_flag = kiyo_trade_start@ORBIT
			has_fleet_flag = kiyo_trade_has_trade_route
		}
		owner = { any_owned_planet = { root = { has_fleet_flag = kiyo_trade_start@PREV } } }
		if = {
			limit = {
				owner = {
					any_owned_planet = {
						prev = {
							any_owned_fleet = {
								NOT = { is_same_value = root }
								has_fleet_flag = kiyo_trade_start@PREVPREV
							}
						}
					}
				}
			}
			orbit = {
				root.owner = {
					NOT = {
						any_owned_fleet = {
							NOT = { is_same_value = root }
							has_fleet_flag = kiyo_trade_end@PREVPREV
						}
					}
				}
			}
		}
	}
	
	immediate = {
		remove_fleet_flag = kiyo_trade_going@ORBIT
		set_fleet_flag = kiyo_trade_end@ORBIT
		orbit = { save_event_target_as = kiyo_trade_end }
		owner = {
			random_owned_planet = { limit = { root = { has_fleet_flag = kiyo_trade_start@PREV } }
				save_event_target_as = kiyo_trade_start
				root = { set_name = "[PREV.GetName] - [ORBIT.GetName] Cargo (To [PREV.GetName]) (Cargo Size: [This.kiyo_trade_max_cargo_ships_per_fleet]/[This.Owner.kiyo_trade_max_cargo_ships_per_fleet])" }
			}
		}
		queue_actions = { orbit_planet = event_target:kiyo_trade_start }
		set_fleet_flag = kiyo_trade_has_trade_route
		set_fleet_flag = kiyo_trade_ending
		
		# Prevent expire event from firing immediately after starting a trade route
		set_fleet_flag = kiyo_trade_start_expired
		set_fleet_flag = kiyo_trade_end_expired
		
		owner = { save_event_target_as = kiyo_trade_trader }	# For Notification Localization
		save_event_target_as = kiyo_trade_fleet
		event_target:kiyo_trade_end = { owner = { country_event = { id = kiyo_trade_orbit_event.12 } } }
	}
	
	option = { name = GOOD }
}

# Set cargo ship origin planet to different planet
fleet_event = {
	id = kiyo_trade_orbit_event.11
	hide_window = yes
	#is_triggered_only = yes
	
	trigger = {
		exists = owner
		exists = orbit
		orbit = {
			exists = owner
			owner = {
				is_country_type = default
				is_same_value = root.owner
			}
			num_buildings = { type = any value >= 5 }
			count_pops = { limit = { has_job = yes } count >= 20 }
		}
		any_owned_ship = { is_ship_size = kiyo_trade }
		NOT = {
			has_fleet_flag = kiyo_event_trade_deleted_cargo
			has_fleet_flag = kiyo_trade_start@ORBIT
			has_fleet_flag = kiyo_trade_has_trade_route
		}
		owner = { any_owned_planet = { root = { has_fleet_flag = kiyo_trade_start@PREV orbit = { NOT = { is_same_value = prevprev } } } } }
	}
	
	immediate = {
		owner = { random_owned_planet = { limit = { root = { has_fleet_flag = kiyo_trade_start@PREV } } root = { remove_fleet_flag = kiyo_trade_start@PREV } } }
		set_fleet_flag = kiyo_trade_start@ORBIT
		set_name = "Cargo from [Orbit.GetName] (Cargo Size: [This.kiyo_trade_max_cargo_ships_per_fleet]/[This.Owner.kiyo_trade_max_cargo_ships_per_fleet])"
	}
	
}

# Notify Trade Target of Trade Route to their planet
country_event = {
	id = kiyo_trade_orbit_event.12
	title = kiyo_trade_orbit_event.12.title
	desc = kiyo_trade_orbit_event.12.desc
	picture = GFX_evt_galactic_market
	location = event_target:kiyo_trade_end
	is_triggered_only = yes
	
	immediate = {
		event_target:kiyo_trade_fleet = {
			random_planet = { limit = { prev = { has_fleet_flag = kiyo_trade_start@PREV } } save_event_target_as = kiyo_trade_start }
			random_planet = { limit = { prev = { has_fleet_flag = kiyo_trade_end@PREV } } save_event_target_as = kiyo_trade_end }
			kiyo_mod_trade_set_route_time = yes
		}
	}
	
	option = { name = OK }
}

# Trade Fleet trading back and forth
fleet_event = {
	id = kiyo_trade_orbit_event.2
	hide_window = yes
	#is_triggered_only = yes
	
	trigger = {
		owner = { any_owned_planet = { root = { has_fleet_flag = kiyo_trade_start@PREV } } }
		any_country = { is_country_type = default any_owned_planet = { root = { has_fleet_flag = kiyo_trade_end@PREV } } }
		NOR = {
			has_fleet_flag = kiyo_event_trade_deleted_cargo
			has_fleet_flag = kiyo_event_trade_expired_cargo
		}
		has_fleet_flag = kiyo_trade_has_trade_route
		if = { limit = { exists = orbit }
			OR = {
				AND = {
					has_fleet_flag = kiyo_trade_starting
					orbit = { root = { has_fleet_flag = kiyo_trade_end@PREV } }
				}
				AND = {
					has_fleet_flag = kiyo_trade_ending
					orbit = { root = { has_fleet_flag = kiyo_trade_start@PREV } }
				}
			}
		}
		else = { always = no }
	}
	
	immediate = {
		owner = { random_owned_planet = { limit = { root = { has_fleet_flag = kiyo_trade_start@PREV } } save_event_target_as = kiyo_trade_start } }
		random_planet = { limit = { root = { has_fleet_flag = kiyo_trade_end@PREV } } save_event_target_as = kiyo_trade_end }
	
		switch = { trigger = has_fleet_flag
			kiyo_trade_starting = {
				kiyo_trade_calculate_resources = yes
				remove_fleet_flag = kiyo_trade_starting
				set_fleet_flag = kiyo_trade_ending
				
				# Refresh cargo
				set_timed_fleet_flag = { flag = kiyo_trade_end_time days = 600 }
				remove_fleet_flag = kiyo_trade_start_expired
				
				# Queue action in case people mess with things
				set_name = "[kiyo_trade_start.GetName] - [kiyo_trade_end.GetName] Cargo (To [kiyo_trade_start.GetName]) (Cargo Size: [This.kiyo_trade_max_cargo_ships_per_fleet]/[This.Owner.kiyo_trade_max_cargo_ships_per_fleet])"
				queue_actions = { orbit_planet = event_target:kiyo_trade_start }
			}
			kiyo_trade_ending = {
				kiyo_trade_calculate_resources = yes
				remove_fleet_flag = kiyo_trade_ending
				set_fleet_flag = kiyo_trade_starting
				
				# Refresh cargo
				set_timed_fleet_flag = { flag = kiyo_trade_start_time days = 600 }
				remove_fleet_flag = kiyo_trade_end_expired
				
				# Queue action in case people mess with things
				set_name = "[kiyo_trade_start.GetName] - [kiyo_trade_end.GetName] Cargo (To [kiyo_trade_end.GetName]) (Cargo Size: [This.kiyo_trade_max_cargo_ships_per_fleet]/[This.Owner.kiyo_trade_max_cargo_ships_per_fleet])"
				queue_actions = { orbit_planet = event_target:kiyo_trade_end }
			}
			default = { log = "HOW DID THIS HAPPEN?! (kiyo_trade_orbit_event.2)" }
		}
	}

}