### Spawn Minis Cluster
namespace = alpha_gate
# Spawn the Atronach Cluster
country_event = {
	id = alpha_gate.3
	hide_window = yes
	is_triggered_only = yes
	fire_only_once = yes
	immediate = {
		set_global_flag = extragalactic_3_spawned
		set_spawn_system_batch = begin
		no_scope = {
			spawn_system = {
				min_distance >= 540
				max_distance <= 542
				min_orientation_angle = 125
				max_orientation_angle = 130
				initializer = atronach_cluster_01
			}
			random_system = {
				limit = { has_star_flag = atronach_cluster_01 }
        save_global_event_target_as = atronach_cluster_01
				spawn_system = {
					min_distance >= 30
					max_distance <= 32
					min_orientation_angle = 320
					max_orientation_angle = 325
					initializer = atronach_cluster_02
				}
				spawn_system = {
					min_distance >= 27
					max_distance <= 29
					min_orientation_angle = 170
					max_orientation_angle = 175
					initializer = atronach_cluster_03
				}
				spawn_system = {
					min_distance >= 28
					max_distance <= 30
					min_orientation_angle = 255
					max_orientation_angle = 260
					initializer = atronach_cluster_04
				}
			}
		}
		random_system = {
			limit = { has_star_flag = atronach_cluster_02 }
			save_global_event_target_as = atronach_cluster_02
			spawn_system = {
				min_distance >= 37
				max_distance <= 40
				min_orientation_angle = 250
				max_orientation_angle = 255
				initializer = atronach_cluster_05
			}
		}
		random_system = {
			limit = { has_star_flag = atronach_cluster_03 }
			save_global_event_target_as = atronach_cluster_03
			spawn_system = {
				min_distance >= 20
				max_distance <= 23
				min_orientation_angle = 240
				max_orientation_angle = 245
				initializer = atronach_cluster_06
			}
		}
		random_system = {
			limit = { has_star_flag = atronach_cluster_04 }
			save_global_event_target_as = atronach_cluster_04
			spawn_system = {
				min_distance >= 43
				max_distance <= 48
				min_orientation_angle = 275
				max_orientation_angle = 280
				initializer = atronach_cluster_09
			}
		}
		random_system = {
			limit = { has_star_flag = atronach_cluster_06 }
			save_global_event_target_as = atronach_cluster_06
			spawn_system = {
				min_distance >= 29
				max_distance <= 32
				min_orientation_angle = 265
				max_orientation_angle = 270
				initializer = atronach_cluster_07
			}
		}
		random_system = {
			limit = { has_star_flag = atronach_cluster_07 }
			save_global_event_target_as = atronach_cluster_07
			spawn_system = {
				min_distance >= 21
				max_distance <= 23
				min_orientation_angle = 300
				max_orientation_angle = 305
				initializer = atronach_cluster_08
			}
		}
		random_system = {
			limit = { has_star_flag = atronach_cluster_08 }
			save_global_event_target_as = atronach_cluster_08
			spawn_system = {
				min_distance >= 25
				max_distance <= 28
				min_orientation_angle = 275
				max_orientation_angle = 280
				initializer = atronach_cluster_10
			}
		}
		random_system = {
			limit = { has_star_flag = atronach_cluster_05 }
			save_global_event_target_as = atronach_cluster_05
		}
		random_system = {
			limit = { has_star_flag = atronach_cluster_09 }
			save_global_event_target_as = atronach_cluster_09
		}
		random_system = {
			limit = { has_star_flag = atronach_cluster_10 }
			save_global_event_target_as = atronach_cluster_10
		}
		# clear all hyperlanes to and within the cluster
		every_system = {
			limit = { has_star_flag = atronach_cluster }
			isolate_system = yes
		}
    # add hyperlanes
		event_target:atronach_cluster_01 = {
			add_hyperlane = {
				from = event_target:atronach_cluster_01
				to = event_target:atronach_cluster_02
			}
		}
		event_target:atronach_cluster_01 = {
			add_hyperlane = {
				from = event_target:atronach_cluster_01
				to = event_target:atronach_cluster_03
			}
		}
		event_target:atronach_cluster_01 = {
			add_hyperlane = {
				from = event_target:atronach_cluster_01
				to = event_target:atronach_cluster_04
			}
		}
		event_target:atronach_cluster_02 = {
			add_hyperlane = {
				from = event_target:atronach_cluster_02
				to = event_target:atronach_cluster_05
			}
		}
		event_target:atronach_cluster_03 = {
			add_hyperlane = {
				from = event_target:atronach_cluster_03
				to = event_target:atronach_cluster_06
			}
		}
		event_target:atronach_cluster_06 = {
			add_hyperlane = {
				from = event_target:atronach_cluster_06
				to = event_target:atronach_cluster_07
			}
		}
		event_target:atronach_cluster_07 = {
			add_hyperlane = {
				from = event_target:atronach_cluster_07
				to = event_target:atronach_cluster_08
			}
		}
		event_target:atronach_cluster_08 = {
			add_hyperlane = {
				from = event_target:atronach_cluster_08
				to = event_target:atronach_cluster_10
			}
		}
		event_target:atronach_cluster_08 = {
			add_hyperlane = {
				from = event_target:atronach_cluster_08
				to = event_target:atronach_cluster_09
			}
		}
		event_target:atronach_cluster_09 = {
			add_hyperlane = {
				from = event_target:atronach_cluster_09
				to = event_target:atronach_cluster_04
			}
		}
		# add wormholes
    random_system = {
      limit = {
        has_natural_wormhole = no
        is_fe_cluster = no
        NOR = {
          has_star_flag = abandoned_gateway
          has_star_flag = AI_hub
          has_star_flag = empire_home_system
          has_star_flag = empire_cluster
          has_star_flag = hostile_system
          has_star_flag = sol
          has_star_flag = extragalactic_cluster
          has_star_flag = marauder_system
        }
      }
      event_target:atronach_cluster_05 = {
				# done this way to ensure we don't spawn "orphan" wormholes (wormholes that aren't linked to anything)
					spawn_natural_wormhole = {
					bypass_type = wormhole
					random_pos = yes
					orbit_angle = 360
				}
			}
			spawn_natural_wormhole = {
				bypass_type = wormhole
				random_pos = yes
				orbit_angle = 360
			}
			link_wormholes = event_target:atronach_cluster_05
    }
		random_system = {
      limit = {
        has_natural_wormhole = no
        is_fe_cluster = no
        NOR = {
          has_star_flag = abandoned_gateway
          has_star_flag = AI_hub
          has_star_flag = empire_home_system
          has_star_flag = empire_cluster
          has_star_flag = hostile_system
          has_star_flag = sol
          has_star_flag = extragalactic_cluster
          has_star_flag = marauder_system
        }
      }
      event_target:atronach_cluster_06 = {
				# done this way to ensure we don't spawn "orphan" wormholes (wormholes that aren't linked to anything)
					spawn_natural_wormhole = {
					bypass_type = wormhole
					random_pos = yes
					orbit_angle = 360
				}
			}
			spawn_natural_wormhole = {
				bypass_type = wormhole
				random_pos = yes
				orbit_angle = 360
			}
			link_wormholes = event_target:atronach_cluster_06
    }
		random_system = {
      limit = {
        has_natural_wormhole = no
        is_fe_cluster = no
        NOR = {
          has_star_flag = abandoned_gateway
          has_star_flag = AI_hub
          has_star_flag = empire_home_system
          has_star_flag = empire_cluster
          has_star_flag = hostile_system
          has_star_flag = sol
          has_star_flag = extragalactic_cluster
          has_star_flag = marauder_system
        }
      }
      event_target:atronach_cluster_10 = {
				# done this way to ensure we don't spawn "orphan" wormholes (wormholes that aren't linked to anything)
					spawn_natural_wormhole = {
					bypass_type = wormhole
					random_pos = yes
					orbit_angle = 360
				}
			}
			spawn_natural_wormhole = {
				bypass_type = wormhole
				random_pos = yes
				orbit_angle = 360
			}
			link_wormholes = event_target:atronach_cluster_10
    }
		set_spawn_system_batch = end
	}
}


### Move Empire with Civic Alpha Gate to the Alpha Cluster


country_event = {
	id = alpha_gate.97
	hide_window = yes
	fire_only_once = yes
	is_triggered_only = yes

	immediate = {
		random_country = {
			limit = {
				has_valid_civic = civic_mini_cluster
			}
			save_event_target_as = alpha_nexus_country
		}
		random_system_within_border = {
			limit = {
				has_star_flag = empire_home_system
			}
			save_event_target_as = original_cap_system
		}
		random_system =  {
			limit = {
				has_star_flag = alpha_cluster_tinusa
			}
			save_event_target_as = new_cap_system
			### Starbase
			create_starbase = {
				size = starbase_starport
				module = shipyard
				building = crew_quarters
				owner = event_target:alpha_nexus_country
			}
			### Science Ship
			create_fleet = {
				effect = {
					set_owner = event_target:alpha_nexus_country
	
					create_ship = {
						name = random
						random_existing_design = science
					}
	
					set_fleet_stance = evasive				
					#set_location = capital_star
					set_location = event_target:new_cap_system.star

					owner = {
						create_leader = {
							type = scientist
							sub_type = survey
							name = random
							species = owner_main_species
						}
					}
					set_leader = last_created_leader
				}			
			}
			### Construction Ship
			create_fleet = {
				effect = {
					set_owner = event_target:alpha_nexus_country
	
					create_ship = {
						name = random
						random_existing_design = constructor
					}
	
					set_fleet_stance = evasive				
					#set_location = capital_star
					set_location = event_target:new_cap_system.star
				}			
			}
			### Navy
			create_fleet = {
				set_take_point = yes
				effect = {
					set_owner = event_target:alpha_nexus_country
					
					while = {
						count = 3
						create_ship = {
							name = random
							random_existing_design = corvette
						}
					}
					#set_location = root.star
					set_location = event_target:new_cap_system.star
				}
			}
		}
		#find homeworld and save it
		random_owned_planet ={
			limit = { is_capital = yes }
			save_event_target_as = cap_to_nuke
		}
		random_owned_pop = {
			limit = { is_exact_same_species = owner_species }
			species = { 
				this = { save_event_target_as = new_alpha_species }
			}
		}	
		random_planet = {
			limit = { has_planet_flag = planet_tinusa }
			change_pc = desertislands
			reset_planet = yes
			set_owner = event_target:alpha_nexus_country
			reset_start_buildings_and_blockers = yes
			set_capital = yes
			save_event_target_as = new_cap
		}
		#change species to be alpha_gate species
		random_owned_pop = {
			limit = { is_exact_same_species = owner_species }
			species = { 
				set_species_homeworld = event_target:new_cap
			}
		}
		every_owned_pop = {
			limit = { is_exact_same_species = owner_species }
			#changes_species = event_target:new_alpha_species
			modify_species = {
				species = this
				ideal_planet_class = pc_desertislands
				base = none # makes this replace parent species
			}
		}
		change_dominant_species = { species = owner_species change_all = yes }

		random_planet = {
			limit = { has_planet_flag = planet_tinusa }
			create_pop = {
				species = owner_species #was event_target:new_alpha_species
			}
		}

		# Nuke other colonies gained from advanced empire, etc
		every_owned_planet = {
			limit = { is_capital = no }
			destroy_colony = yes
		}
		#Nuke old homeworld planet
		random_owned_planet ={
			limit = { is_same_value = event_target:cap_to_nuke }
			random_list = {
				18 = { change_pc = pc_barren }
				18 = { change_pc = pc_molten }
				18 = { change_pc = pc_barren_cold }
				18 = { change_pc = pc_toxic }
				18 = { change_pc = pc_frozen }
				5 = { change_pc = pc_broken }
				5 = { change_pc = pc_shattered }
			}
			if = {
				limit = { 
					NOR = {
						is_planet_class = pc_broken
						is_planet_class = pc_shattered
					}
				}
				add_modifier = { modifier = "terraforming_candidate" days = -1 }
			}
		}

		### Clean-Up old home system

		
		event_target:original_cap_system = {
			every_fleet_in_system = {
				destroy_fleet = this
			}
		}
		random_country = {
			limit = {
				has_valid_civic = civic_alpha_gateway
			}
			country_event = { id = alpha_gate.98 }
		}
	}
}
